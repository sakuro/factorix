module Factorix
  module SerDes
    # Represent a 4-component version number (major.minor.patch-build)
    class Version64
      include Comparable

      # Create a new Version64 instance
      #
      # @param args [Array] Either a version string "X.Y.Z-B" or 4 integers representing major, minor, patch, build
      # @return [Version64] New Version64 instance
      # @raise [ArgumentError] If the arguments are invalid
      def initialize: (*untyped args) -> void

      # Create a new Version64 instance (alias for new)
      #
      # @param args [Array] Either a version string "X.Y.Z-B" or 4 integers representing major, minor, patch, build
      # @return [Version64] New Version64 instance
      # @raise [ArgumentError] If the arguments are invalid
      def self.[]: (*untyped args) -> Version64

      # Convert to string representation
      # @return [String] Version string in format "X.Y.Z-B"
      def to_s: () -> String

      # Convert to array of integers
      # @return [Array<Integer>] Array containing [major, minor, patch, build]
      def to_a: () -> Array[Integer]

      # Compare with another Version64
      # @param other [Version64] Version to compare with
      # @return [Integer, nil] -1, 0, 1 for less than, equal to, greater than; nil if not comparable
      def <=>: (Version64 other) -> Integer?

      # Get the version components
      # @return [Array<Integer>] Array containing [major, minor, patch, build]
      protected def version: () -> Array[Integer]
    end
  end
end
