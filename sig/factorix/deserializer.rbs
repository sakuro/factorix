module Factorix
  # Deserialize data from binary format
  class Deserializer
    # Create a new Deserializer instance
    #
    # @param stream [IO] An IO-like object that responds to #read
    # @raise [ArgumentError] If the stream doesn't respond to #read
    def initialize: (untyped stream) -> void

    # Read raw bytes from the stream
    #
    # @param length [Integer] Number of bytes to read
    # @raise [ArgumentError] If length is nil or negative
    # @raise [EOFError] If end of file is reached before reading length bytes
    # @return [String] Binary data read
    def read_bytes: (Integer length) -> String

    # Read an unsigned 8-bit integer
    #
    # @return [Integer] 8-bit unsigned integer
    def read_u8: () -> Integer

    # Read an unsigned 16-bit integer
    #
    # @return [Integer] 16-bit unsigned integer
    def read_u16: () -> Integer

    # Read an unsigned 32-bit integer
    #
    # @return [Integer] 32-bit unsigned integer
    def read_u32: () -> Integer

    # Read a space-optimized 16-bit unsigned integer
    # https://wiki.factorio.com/Data_types#Space_Optimized
    #
    # @return [Integer] 16-bit unsigned integer
    def read_optim_u16: () -> Integer

    # Read a space-optimized 32-bit unsigned integer
    # https://wiki.factorio.com/Data_types#Space_Optimized
    #
    # @return [Integer] 32-bit unsigned integer
    def read_optim_u32: () -> Integer

    # Read a tuple of 16-bit unsigned integers
    #
    # @param length [Integer] Number of integers to read
    # @return [Array<Integer>] Array of 16-bit unsigned integers
    def read_u16_tuple: (Integer length) -> Array[Integer]

    # Read a tuple of optimized integers
    #
    # @param bit_size [Integer] Bit size of the integers
    # @param length [Integer] Number of integers to read
    # @return [Array<Integer>] Array of optimized integers
    def read_optim_tuple: (Integer bit_size, Integer length) -> Array[Integer]

    # Read a boolean value
    #
    # @return [Boolean] Boolean value
    def read_bool: () -> bool

    # Read a string
    #
    # @return [String] String read
    def read_str: () -> String

    # Read a string property
    # https://wiki.factorio.com/Property_tree#String
    #
    # @return [String] String property
    def read_str_property: () -> String

    # Read a double-precision floating point number
    # https://wiki.factorio.com/Property_tree#Number
    #
    # @return [Float] Double-precision floating point number
    def read_double: () -> Float

    # Read a Version64 object
    #
    # @return [Version64] Version64 object
    def read_version64: () -> Version64

    # Read a Version24 object
    #
    # @return [Version24] Version24 object
    def read_version24: () -> Version24

    # Read a list
    # https://wiki.factorio.com/Property_tree#List
    #
    # @return [Array] List of objects
    def read_list: () -> Array[untyped]

    # Read a dictionary
    # https://wiki.factorio.com/Property_tree#Dictionary
    #
    # @return [Hash] Dictionary of key-value pairs
    def read_dictionary: () -> Hash[String, untyped]

    # Read a signed long integer (8 bytes)
    #
    # @return [Integer] Signed long integer
    def read_long: () -> Integer

    # Read an unsigned long integer (8 bytes)
    #
    # @return [Integer] Unsigned long integer
    def read_unsigned_long: () -> Integer

    # Read a property tree
    #
    # @raise [UnknownPropertyType] If the property type is not supported
    # @return [Object] Object read
    def read_property_tree: () -> untyped
  end
end
