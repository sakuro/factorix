module Factorix
  # Represent MOD
  class Mod < Data
    include Comparable

    # @!attribute [r] name
    #   @return [String] the name of the MOD
    attr_reader name: String

    # Constructor for Mod
    def initialize: (name: String) -> void

    # Factory method for creating Mod instances
    def self.[]: (name: String) -> Mod

    # Return true if this MOD is the base MOD
    # @return [Boolean] true if this MOD is the base MOD
    # @note The check is case-sensitive, only "base" (not "BASE" or "Base") is considered the base MOD
    def base?: -> bool

    # Return the name of the MOD
    # @return [String] the name of the MOD
    def to_s: -> String

    # Compare this MOD with another MOD by name.
    # @param other [Mod] the other MOD
    # @return [Integer] -1 if this MOD precedes the other, 0 if they are equal, 1 if this MOD follows the other
    # @note Comparison is case-sensitive for MOD names.
    # @note The base MOD (exactly "base", case-sensitive) always comes before any other MOD.
    def <=>: (Mod other) -> Integer
  end
end
