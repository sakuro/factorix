module Factorix
  # Factorio runtime environment
  class Runtime
    # Raised when run on unsupported platform
    class UnsupportedPlatform < Error
    end

    # Raised when the game is already running and an attempt to launch the game is made
    class AlreadyRunning < Error
    end

    # Return the platform the script is running on
    #
    # @return [Runtime] the runtime environment
    # @raise [UnsupportedPlatform] if the platform is not supported
    def self.runtime: () -> Runtime

    # Return the MODs directory of Factorio
    #
    # @return [Pathname] the MODs directory of Factorio
    def mods_dir: () -> Pathname

    # Return the script-output directory of Factorio
    #
    # @return [Pathname] the script-output directory of Factorio
    def script_output_dir: () -> Pathname

    # Return the path of the mod-list.json file
    #
    # @return [Pathname] the path of the mod-list.json file
    def mod_list_path: () -> Pathname

    # Return the path of the mod-settings.dat file
    #
    # @return [Pathname] the path of the mod-settings.dat file
    def mod_settings_path: () -> Pathname

    # Launch the game
    #
    # @return [void]
    # @raise [RuntimeError] if the game is already running
    def launch: (*untyped, async: bool) -> void

    # Check if the game is running.
    # Becasuse the game becomes daemonized on launch, we cannot use the process ID nor Process groups
    # to check if the game is running.  Instead, we check if the game is running by external means.
    # (e.g. polling the process list periodically)
    #
    # Note: Subclasses should implement this method
    # @return [Boolean] true if the game is running, false otherwise
    def running?: () -> bool

    # Return the user directory of Factorio
    # @return [Pathname] the user directory of Factorio
    def user_dir: () -> Pathname

    # Return the executable path of Factorio
    # @return [Pathname] the executable path of Factorio
    def executable: () -> Pathname

    # Return the data directory of Factorio
    # @return [Pathname] the data directory of Factorio
    def data_dir: () -> Pathname

    # Return the path of the player-data.json file
    # @return [Pathname] the path of the player-data.json file
    def player_data_path: () -> Pathname

    # Return the path to the cache directory
    # @return [Pathname] the path to the cache directory
    def cache_dir: () -> Pathname

    # Evaluate the block with only the specified MODs enabled
    # @param mod_names [Array<String>] the names of the MODs to enable
    # @yield the block to evaluate
    # @return [void]
    def with_only_mod_enabled: (*String) { () -> void } -> void
  end
end
