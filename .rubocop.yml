---
AllCops:
  DisplayCopNames: true
  DisplayStyleGuide: true
  EnabledByDefault: true
  Exclude:
  - bin/**/*
  - vendor/**/*
  # Ignore Ruby files in the project root as they are often used for experiments
  - "*.rb"
  ExtraDetails: true
  TargetRubyVersion: 3.2
  UseCache: true
inherit_mode:
  merge:
  - AllowedCops
  - Exclude
plugins:
- rubocop-performance
- rubocop-rake
- rubocop-rspec
- rubocop-thread_safety
require: []
inherit_from:
  - .rubocop_todo.yml
  - .rubocop/bundler.yml
  - .rubocop/gemspec.yml
  - .rubocop/layout.yml
  - .rubocop/lint.yml
  - .rubocop/metrics.yml
  - .rubocop/migration.yml
  - .rubocop/naming.yml
  - .rubocop/performance.yml
  - .rubocop/rspec.yml
  - .rubocop/rake.yml
  - .rubocop/security.yml
  - .rubocop/style.yml
  - .rubocop/threadsafety.yml

Metrics/AbcSize:
  Exclude:
    # These serializer/deserializer classes handle complex binary data formats
    # and require complex logic that cannot be easily simplified without
    # compromising readability and maintainability.
    - 'lib/factorix/ser_des/deserializer.rb'
    - 'lib/factorix/ser_des/serializer.rb'
    # The API response parsing methods in mod_portal/api.rb perform straightforward
    # data structure transformations. Breaking these methods down would make the code
    # less readable and harder to maintain, as the transformations are best understood
    # as a single mapping operation.
    - 'lib/factorix/mod_portal/api.rb'

Metrics/CyclomaticComplexity:
  Exclude:
    # The deserializer and serializer classes need to handle multiple data types
    # and format variations, requiring conditional logic that naturally increases
    # cyclomatic complexity.
    - 'lib/factorix/ser_des/deserializer.rb'
    - 'lib/factorix/ser_des/serializer.rb'

Metrics/MethodLength:
  Exclude:
    # These methods implement core serialization/deserialization logic that
    # needs to handle multiple cases in a cohesive way. Breaking them up would
    # reduce readability and make the code harder to maintain.
    - 'lib/factorix/ser_des/deserializer.rb'
    - 'lib/factorix/ser_des/serializer.rb'

Metrics/ClassLength:
  Exclude:
    # The serializer class needs to handle many different data types and formats,
    # which naturally leads to a larger class with more methods.
    - 'lib/factorix/ser_des/serializer.rb'
    # The API class handles complex data structures from the Factorio MOD Portal API.
    # The class length is primarily due to the large number of attributes in API responses
    # that need proper parsing and type conversion. Breaking this into smaller classes
    # would add unnecessary complexity and reduce maintainability.
    - 'lib/factorix/mod_portal/api.rb'

RSpec/ExampleLength:
  Exclude:
    # These examples need to test multiple aspects of complex operations in a single test
    # to ensure the correct behavior of serialization/deserialization operations.
    - 'spec/factorix/ser_des/serializer_spec.rb'

Metrics/ParameterLists:
  Exclude:
    # The parameters directly reflect the Factorio MOD Portal API's query parameters.
    # Using keyword arguments makes the interface clear and self-documenting.
    # Breaking these parameters into a separate object would add unnecessary complexity
    # for what is essentially a simple API wrapper.
    - 'lib/factorix/mod_portal/api.rb'

RSpec/NestedGroups:
  Max: 4

# Allow Dir.chdir when used with blocks for git operations and test isolation
ThreadSafety/DirChdir:
  AllowCallWithBlock: true
  Exclude:
    - lib/factorix/cli/commands/mod/new.rb  # Git operations in new_mod_dir
    - spec/factorix/cli/commands/mod/new_spec.rb  # Test directory isolation

# Allow stubbing methods on the subject for testing error conditions
# This is necessary for testing failure scenarios where system commands fail
RSpec/SubjectStub:
  Exclude:
    - spec/factorix/cli/commands/mod/new_spec.rb  # Git command failure testing
